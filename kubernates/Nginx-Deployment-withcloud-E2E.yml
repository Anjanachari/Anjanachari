---
# Create a namespace for all nginx-related resources
apiVersion: v1
kind: Namespace
metadata:
  name: nginx-ns
---
# ConfigMap to hold non-sensitive config data (like logging level, DB host)
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-cm
  namespace: nginx-ns
data:
  log_level: debug
  db_host: your-rds-endpoint.amazonaws.com # Replace with your actual RDS endpoint
---
# Secret for sensitive info (base64 encoded)
apiVersion: v1
kind: Secret
metadata:
  name: nginx-ss
  namespace: nginx-ns
type: Opaque
data:
  # base64 for "password123"
  db_password: cGFzc3dvcmQxMjM=
---
# PersistentVolumeClaim using AWS EBS via the default gp2 StorageClass
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nginx-pvc
  namespace: nginx-ns
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: gp2 # AWS default EBS storage class; adjust if needed
---
# Deployment with 3 nginx replicas, environment variables, volume mount, probes
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: nginx-ns
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
        envFrom:
        - configMapRef:
            name: nginx-cm
        - secretRef:
            name: nginx-ss
        volumeMounts:
        - name: nginx-volume
          mountPath: /usr/share/nginx/html
        resources:
          requests:
            memory: 256Mi
            cpu: 100m
          limits:
            memory: 512Mi
            cpu: 250m
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 20
      volumes:
      - name: nginx-volume
        persistentVolumeClaim:
          claimName: nginx-pvc
---
# Horizontal Pod Autoscaler based on CPU usage between 2 and 10 replicas
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: nginx-hpa
  namespace: nginx-ns
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nginx-deployment
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
---
# Service exposing nginx pods as NodePort for ALB Ingress to route traffic
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: nginx-ns
spec:
  selector:
    app: nginx
  ports:
  - protocol: TCP
    port: 80 # Service port
    targetPort: 80 # Container port
  type: NodePort # NodePort for AWS ALB ingress target group
---
# Ingress resource with AWS ALB ingress controller annotations
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-ingress
  namespace: nginx-ns
  annotations:
    kubernetes.io/ingress.class: alb # Use AWS ALB Ingress controller
    alb.ingress.kubernetes.io/scheme: internet-facing # Public ALB
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80}]'
    alb.ingress.kubernetes.io/target-type: ip # Target pods by IP (recommended)
    nginx.ingress.kubernetes.io/rewrite-target: / # Rewrite all paths to /
spec:
  rules:
  - host: nginx.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx-service
            port:
              number: 80
